// <auto-generated />
using System;
using HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Migrations
{
    [DbContext(typeof(VacanciesDbContext))]
    [Migration("20240102062608_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Building")
                        .HasColumnType("text")
                        .HasColumnName("building");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_areas");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_areas_parent_id");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_areas_head_hunter_id_name");

                    b.ToTable("areas", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.BillingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_billing_types");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_billing_types_head_hunter_id_name");

                    b.ToTable("billing_types", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("HeadHunterId")
                        .HasDatabaseName("ix_currencies_head_hunter_id");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_departments_head_hunter_id_name");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.DriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.HasKey("Id")
                        .HasName("pk_driver_license_types");

                    b.HasIndex("HeadHunterId")
                        .HasDatabaseName("ix_driver_license_types_head_hunter_id");

                    b.ToTable("driver_license_types", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlternateUrl")
                        .HasColumnType("text")
                        .HasColumnName("alternate_url");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<bool?>("Blacklisted")
                        .HasColumnType("boolean")
                        .HasColumnName("blacklisted");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("site_url");

                    b.Property<bool?>("Trusted")
                        .HasColumnType("boolean")
                        .HasColumnName("trusted");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("VacanciesUrl")
                        .HasColumnType("text")
                        .HasColumnName("vacancies_url");

                    b.HasKey("Id")
                        .HasName("pk_employers");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_employers_area_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_employers_type_id");

                    b.HasIndex("Trusted", "Blacklisted", "HeadHunterId", "Name")
                        .HasDatabaseName("ix_employers_trusted_blacklisted_head_hunter_id_name");

                    b.ToTable("employers", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerBrandedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.HasKey("Id")
                        .HasName("pk_employer_branded_descriptions");

                    b.HasIndex("EmployerId")
                        .IsUnique()
                        .HasDatabaseName("ix_employer_branded_descriptions_employer_id");

                    b.ToTable("employer_branded_descriptions", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.HasKey("Id")
                        .HasName("pk_employer_descriptions");

                    b.HasIndex("EmployerId")
                        .IsUnique()
                        .HasDatabaseName("ix_employer_descriptions_employer_id");

                    b.ToTable("employer_descriptions", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid")
                        .HasColumnName("industry_id");

                    b.HasKey("Id")
                        .HasName("pk_employer_industries");

                    b.HasIndex("EmployerId")
                        .HasDatabaseName("ix_employer_industries_employer_id");

                    b.HasIndex("IndustryId")
                        .HasDatabaseName("ix_employer_industries_industry_id");

                    b.ToTable("employer_industries", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerInsiderInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.Property<Guid>("InsiderInterviewId")
                        .HasColumnType("uuid")
                        .HasColumnName("insider_interview_id");

                    b.HasKey("Id")
                        .HasName("pk_employer_insider_interviews");

                    b.HasIndex("EmployerId")
                        .HasDatabaseName("ix_employer_insider_interviews_employer_id");

                    b.HasIndex("InsiderInterviewId")
                        .HasDatabaseName("ix_employer_insider_interviews_insider_interview_id");

                    b.ToTable("employer_insider_interviews", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.Property<string>("Normal")
                        .HasColumnType("text")
                        .HasColumnName("normal");

                    b.Property<string>("Original")
                        .HasColumnType("text")
                        .HasColumnName("original");

                    b.Property<string>("Small")
                        .HasColumnType("text")
                        .HasColumnName("small");

                    b.HasKey("Id")
                        .HasName("pk_employer_logos");

                    b.HasIndex("EmployerId")
                        .IsUnique()
                        .HasDatabaseName("ix_employer_logos_employer_id");

                    b.ToTable("employer_logos", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_employer_types");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_employer_types_head_hunter_id_name");

                    b.ToTable("employer_types", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_employments");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_employments_head_hunter_id_name");

                    b.ToTable("employments", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_experiences_head_hunter_id_name");

                    b.ToTable("experiences", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_industries");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_industries_parent_id");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_industries_head_hunter_id_name");

                    b.ToTable("industries", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.InsiderInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_insider_interviews");

                    b.HasIndex("HeadHunterId", "Title")
                        .HasDatabaseName("ix_insider_interviews_head_hunter_id_title");

                    b.ToTable("insider_interviews", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.KeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_key_skills");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_key_skills_head_hunter_id_name");

                    b.ToTable("key_skills", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_languages_head_hunter_id_name");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("HexColor")
                        .HasColumnType("text")
                        .HasColumnName("hex_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_metro_lines");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_metro_lines_area_id");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_metro_lines_head_hunter_id_name");

                    b.ToTable("metro_lines", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("MetroLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("metro_line_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_metro_stations");

                    b.HasIndex("MetroLineId")
                        .HasDatabaseName("ix_metro_stations_metro_line_id");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_metro_stations_head_hunter_id_name");

                    b.ToTable("metro_stations", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_phones");

                    b.ToTable("phones", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.ProfessionalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_professional_roles");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_professional_roles_head_hunter_id_name");

                    b.ToTable("professional_roles", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_schedules_head_hunter_id_name");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<bool?>("Laboring")
                        .HasColumnType("boolean")
                        .HasColumnName("laboring");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_specializations");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_specializations_parent_id");

                    b.HasIndex("Name", "HeadHunterId")
                        .HasDatabaseName("ix_specializations_name_head_hunter_id");

                    b.ToTable("specializations", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptHandicapped")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_handicapped");

                    b.Property<bool>("AcceptIncompleteResumes")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_incomplete_resumes");

                    b.Property<bool>("AcceptKids")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_kids");

                    b.Property<bool?>("AcceptTemporary")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_temporary");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<bool>("AllowMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_messages");

                    b.Property<string>("AlternateUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alternate_url");

                    b.Property<string>("ApplyAlternateUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apply_alternate_url");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<Guid>("BillingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("billing_type_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid")
                        .HasColumnName("employer_id");

                    b.Property<Guid>("EmploymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("employment_id");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uuid")
                        .HasColumnName("experience_id");

                    b.Property<bool>("HasTest")
                        .HasColumnType("boolean")
                        .HasColumnName("has_test");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<DateTime>("InitialCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("initial_created_at");

                    b.Property<Guid?>("InsiderInterviewId")
                        .HasColumnType("uuid")
                        .HasColumnName("insider_interview_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Premium")
                        .HasColumnType("boolean")
                        .HasColumnName("premium");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<bool>("ResponseLetterRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("response_letter_required");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancies");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_vacancies_address_id");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_vacancies_area_id");

                    b.HasIndex("BillingTypeId")
                        .HasDatabaseName("ix_vacancies_billing_type_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_vacancies_department_id");

                    b.HasIndex("EmployerId")
                        .HasDatabaseName("ix_vacancies_employer_id");

                    b.HasIndex("EmploymentId")
                        .HasDatabaseName("ix_vacancies_employment_id");

                    b.HasIndex("ExperienceId")
                        .HasDatabaseName("ix_vacancies_experience_id");

                    b.HasIndex("InsiderInterviewId")
                        .HasDatabaseName("ix_vacancies_insider_interview_id");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_vacancies_schedule_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_vacancies_type_id");

                    b.HasIndex("HasTest", "Premium", "Archived", "AcceptKids", "AllowMessages", "AcceptTemporary", "AcceptHandicapped", "ResponseLetterRequired", "AcceptIncompleteResumes", "HeadHunterId", "Name", "CreatedAt", "PublishedAt", "InitialCreatedAt")
                        .HasDatabaseName("ix_vacancies_has_test_premium_archived_accept_kids_allow_messa");

                    b.ToTable("vacancies", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyBrandedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_branded_descriptions");

                    b.HasIndex("VacancyId")
                        .IsUnique()
                        .HasDatabaseName("ix_vacancy_branded_descriptions_vacancy_id");

                    b.ToTable("vacancy_branded_descriptions", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_contacts");

                    b.HasIndex("VacancyId")
                        .IsUnique()
                        .HasDatabaseName("ix_vacancy_contacts_vacancy_id");

                    b.ToTable("vacancy_contacts", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("phone_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_contact_phones");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_vacancy_contact_phones_contact_id");

                    b.HasIndex("PhoneId")
                        .HasDatabaseName("ix_vacancy_contact_phones_phone_id");

                    b.ToTable("vacancy_contact_phones", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_descriptions");

                    b.HasIndex("VacancyId")
                        .IsUnique()
                        .HasDatabaseName("ix_vacancy_descriptions_vacancy_id");

                    b.ToTable("vacancy_descriptions", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyDriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DriverLicenseTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_license_type_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_driver_license_types");

                    b.HasIndex("DriverLicenseTypeId")
                        .HasDatabaseName("ix_vacancy_driver_license_types_driver_license_type_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_driver_license_types_vacancy_id");

                    b.ToTable("vacancy_driver_license_types", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyKeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("KeySkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("key_skill_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_key_skills");

                    b.HasIndex("KeySkillId")
                        .HasDatabaseName("ix_vacancy_key_skills_key_skill_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_key_skills_vacancy_id");

                    b.ToTable("vacancy_key_skills", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_languages");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_vacancy_languages_language_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_languages_vacancy_id");

                    b.ToTable("vacancy_languages", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyProfessionalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProfessionalRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("professional_role_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_professional_roles");

                    b.HasIndex("ProfessionalRoleId")
                        .HasDatabaseName("ix_vacancy_professional_roles_professional_role_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_professional_roles_vacancy_id");

                    b.ToTable("vacancy_professional_roles", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancySalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<decimal?>("From")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("from");

                    b.Property<bool?>("Gross")
                        .HasColumnType("boolean")
                        .HasColumnName("gross");

                    b.Property<decimal?>("To")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("to");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_salaries");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_vacancy_salaries_currency_id");

                    b.HasIndex("VacancyId")
                        .IsUnique()
                        .HasDatabaseName("ix_vacancy_salaries_vacancy_id");

                    b.HasIndex("Gross", "To", "From")
                        .HasDatabaseName("ix_vacancy_salaries_gross_to_from");

                    b.ToTable("vacancy_salaries", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancySpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_specializations");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_vacancy_specializations_specialization_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_specializations_vacancy_id");

                    b.ToTable("vacancy_specializations", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_types");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_vacancy_types_head_hunter_id_name");

                    b.ToTable("vacancy_types", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.Property<Guid>("WorkingDayId")
                        .HasColumnType("uuid")
                        .HasColumnName("working_day_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_working_days");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_working_days_vacancy_id");

                    b.HasIndex("WorkingDayId")
                        .HasDatabaseName("ix_vacancy_working_days_working_day_id");

                    b.ToTable("vacancy_working_days", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingTimeInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.Property<Guid>("WorkingTimeIntervalId")
                        .HasColumnType("uuid")
                        .HasColumnName("working_time_interval_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_working_time_intervals");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_working_time_intervals_vacancy_id");

                    b.HasIndex("WorkingTimeIntervalId")
                        .HasDatabaseName("ix_vacancy_working_time_intervals_working_time_interval_id");

                    b.ToTable("vacancy_working_time_intervals", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingTimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.Property<Guid>("WorkingTimeModeId")
                        .HasColumnType("uuid")
                        .HasColumnName("working_time_mode_id");

                    b.HasKey("Id")
                        .HasName("pk_vacancy_working_time_modes");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_vacancy_working_time_modes_vacancy_id");

                    b.HasIndex("WorkingTimeModeId")
                        .HasDatabaseName("ix_vacancy_working_time_modes_working_time_mode_id");

                    b.ToTable("vacancy_working_time_modes", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_working_days");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_working_days_head_hunter_id_name");

                    b.ToTable("working_days", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_working_time_intervals");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_working_time_intervals_head_hunter_id_name");

                    b.ToTable("working_time_intervals", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head_hunter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_working_time_modes");

                    b.HasIndex("HeadHunterId", "Name")
                        .HasDatabaseName("ix_working_time_modes_head_hunter_id_name");

                    b.ToTable("working_time_modes", (string)null);
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_areas_areas_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", "Area")
                        .WithMany("Employers")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employers_areas_area_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerType", "Type")
                        .WithMany("Employers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employers_employer_types_type_id");

                    b.Navigation("Area");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerBrandedDescription", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithOne("BrandedDescription")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerBrandedDescription", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_branded_descriptions_employers_employer_id");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerDescription", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithOne("Description")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerDescription", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_descriptions_employers_employer_id");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerIndustry", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithMany("Industries")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_industries_employers_employer_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Industry", "Industry")
                        .WithMany("Employers")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_industries_industries_industry_id");

                    b.Navigation("Employer");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerInsiderInterview", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithMany("InsiderInterviews")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_insider_interviews_employers_employer_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.InsiderInterview", "InsiderInterview")
                        .WithMany("Employers")
                        .HasForeignKey("InsiderInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_insider_interviews_insider_interviews_insider_inte");

                    b.Navigation("Employer");

                    b.Navigation("InsiderInterview");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerLogo", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithOne("Logo")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerLogo", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employer_logos_employers_employer_id");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Industry", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Industry", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_industries_industries_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroLine", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", "Area")
                        .WithMany("MetroLines")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_metro_lines_areas_area_id");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroStation", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroLine", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("MetroLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metro_stations_metro_lines_metro_line_id");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Specialization", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Specialization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_specializations_specializations_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Address", "Address")
                        .WithMany("Vacancies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_addresses_address_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", "Area")
                        .WithMany("Vacancies")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_areas_area_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.BillingType", "BillingType")
                        .WithMany("Vacancies")
                        .HasForeignKey("BillingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_billing_types_billing_type_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Department", "Department")
                        .WithMany("Vacancies")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_vacancies_departments_department_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_employers_employer_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employment", "Employment")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_employments_employment_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Experience", "Experience")
                        .WithMany("Vacancies")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_experiences_experience_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.InsiderInterview", "InsiderInterview")
                        .WithMany("Vacancies")
                        .HasForeignKey("InsiderInterviewId")
                        .HasConstraintName("fk_vacancies_insider_interviews_insider_interview_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Schedule", "Schedule")
                        .WithMany("Vacancies")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_schedules_schedule_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyType", "Type")
                        .WithMany("Vacancies")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_vacancies_vacancy_types_type_id");

                    b.Navigation("Address");

                    b.Navigation("Area");

                    b.Navigation("BillingType");

                    b.Navigation("Department");

                    b.Navigation("Employer");

                    b.Navigation("Employment");

                    b.Navigation("Experience");

                    b.Navigation("InsiderInterview");

                    b.Navigation("Schedule");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyBrandedDescription", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithOne("BrandedDescription")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyBrandedDescription", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_branded_descriptions_vacancies_vacancy_id");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContact", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithOne("Contact")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContact", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_contacts_vacancies_vacancy_id");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContactPhone", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_contact_phones_vacancy_contacts_contact_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Phone", "Phone")
                        .WithMany("VacancyContacts")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_contact_phones_phones_phone_id");

                    b.Navigation("Contact");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyDescription", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithOne("Description")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyDescription", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_descriptions_vacancies_vacancy_id");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyDriverLicenseType", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.DriverLicenseType", "DriverLicenseType")
                        .WithMany("Vacancies")
                        .HasForeignKey("DriverLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_driver_license_types_driver_license_types_driver_li");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("DriverLicenseTypes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_driver_license_types_vacancies_vacancy_id");

                    b.Navigation("DriverLicenseType");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyKeySkill", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.KeySkill", "KeySkill")
                        .WithMany("Vacancies")
                        .HasForeignKey("KeySkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_key_skills_key_skills_key_skill_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("KeySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_key_skills_vacancies_vacancy_id");

                    b.Navigation("KeySkill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyLanguage", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Language", "Language")
                        .WithMany("Vacancies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_languages_languages_language_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("Languages")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_languages_vacancies_vacancy_id");

                    b.Navigation("Language");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyProfessionalRole", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.ProfessionalRole", "ProfessionalRole")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProfessionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_professional_roles_professional_roles_professional_");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("ProfessionalRoles")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_professional_roles_vacancies_vacancy_id");

                    b.Navigation("ProfessionalRole");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancySalary", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Currency", "Currency")
                        .WithMany("Salaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_salaries_currencies_currency_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithOne("Salary")
                        .HasForeignKey("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancySalary", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_salaries_vacancies_vacancy_id");

                    b.Navigation("Currency");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancySpecialization", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Specialization", "Specialization")
                        .WithMany("Vacancies")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_specializations_specializations_specialization_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("Specializations")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_specializations_vacancies_vacancy_id");

                    b.Navigation("Specialization");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingDay", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingDays")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_days_vacancies_vacancy_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingDay", "WorkingDay")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_days_working_days_working_day_id");

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingTimeInterval", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingTimeIntervals")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_time_intervals_vacancies_vacancy_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeInterval", "WorkingTimeInterval")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_time_intervals_working_time_intervals_worki");

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingTimeInterval");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyWorkingTimeMode", b =>
                {
                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingTimeModes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_time_modes_vacancies_vacancy_id");

                    b.HasOne("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeMode", "WorkingTimeMode")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_working_time_modes_working_time_modes_working_time_");

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingTimeMode");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Address", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Area", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employers");

                    b.Navigation("MetroLines");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.BillingType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Currency", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Department", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.DriverLicenseType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employer", b =>
                {
                    b.Navigation("BrandedDescription");

                    b.Navigation("Description");

                    b.Navigation("Industries");

                    b.Navigation("InsiderInterviews");

                    b.Navigation("Logo");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.EmployerType", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Employment", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Experience", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Industry", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employers");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.InsiderInterview", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.KeySkill", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Language", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.MetroLine", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Phone", b =>
                {
                    b.Navigation("VacancyContacts");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.ProfessionalRole", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Schedule", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Specialization", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.Vacancy", b =>
                {
                    b.Navigation("BrandedDescription");

                    b.Navigation("Contact");

                    b.Navigation("Description");

                    b.Navigation("DriverLicenseTypes");

                    b.Navigation("KeySkills");

                    b.Navigation("Languages");

                    b.Navigation("ProfessionalRoles");

                    b.Navigation("Salary");

                    b.Navigation("Specializations");

                    b.Navigation("WorkingDays");

                    b.Navigation("WorkingTimeIntervals");

                    b.Navigation("WorkingTimeModes");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyContact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.VacancyType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingDay", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeInterval", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunterAggregator.Services.Vacancy.Databases.EntityFramework.Vacancies.Entities.WorkingTimeMode", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
